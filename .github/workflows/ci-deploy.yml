name: CI Build & SSH Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/fairdealhub:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/fairdealhub:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output
        run: echo "IMAGE=ghcr.io/${{ github.repository_owner }}/fairdealhub:${{ github.sha }}" >> $GITHUB_OUTPUT
        # $GITHUB_OUTPUT file is automatically handled by actions runner above via echo

  ssh-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for docker-compose file)
        uses: actions/checkout@v4

      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y sshpass || true

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy docker-compose to remote (optional)
        if: ${{ secrets.COPY_COMPOSE == 'true' }}
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_DIR }}/docker-compose.yml

      - name: Trigger remote deploy (pull + up)
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/fairdealhub:${{ github.sha }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} <<'SSH_EOF'
            set -eux
            cd "${REMOTE_DIR}"
            # Ensure docker-compose v2 is available (docker compose) - fallback to docker-compose
            if command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi

            # Export IMAGE so docker-compose with ${IMAGE} works when referencing it.
            export IMAGE="${IMAGE}"

            # Pull the published image and recreate containers
            ${COMPOSE_CMD} pull || true
            ${COMPOSE_CMD} up -d --build --remove-orphans
            ${COMPOSE_CMD} ps
            docker images | head -n 20
            docker system df || true
          SSH_EOF
